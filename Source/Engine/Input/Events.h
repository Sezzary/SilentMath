#pragma once

namespace Silent::Input
{
    enum class EventId
    {
        // Keyboard

        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        Row1,
        Row2,
        Row3,
        Row4,
        Row5,
        Row6,
        Row7,
        Row8,
        Row9,
        Row0,
        Return,
        Escape,
        Backspace,
        Tab,
        Space,
        Minus,
        Equals,
        BracketLeft,
        BracketRight,
        BackSlash,
        Semicolon,
        Apostrophe,
        Comma,
        Period,
        Slash,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        PrintScreen,
        Home,
        PageUp,
        Delete,
        End,
        PageDown,
        Right,
        Left,
        Down,
        Up,
        PadDivide,
        PadMultiply,
        PadMinus,
        PadPlus,
        PadEnter,
        Pad1,
        Pad2,
        Pad3,
        Pad4,
        Pad5,
        Pad6,
        Pad7,
        Pad8,
        Pad9,
        Pad0,
        PadPeriod,
        Ctrl,
        Shift,
        Alt,

        // Mouse

        ClickLeft,
        ClickMiddle,
        ClickRight,
        ScrollUp,
        ScrollDown,
        // TODO
        /*MouseUp,
        MouseDown,
        MouseLeft,
        MouseRight,*/

        // Gamepad

        South,
        East,
        West,
        North,
        Back,
        Start,
        StickLeft,
        StickRight,
        ShoulderLeft,
        ShoulderRight,
        DpadUp,
        DpadDown,
        DpadLeft,
        DpadRight,
        PaddleRight0,
        PaddleLeft0,
        PaddleRight1,
        PaddelLeft1,
        GamepadMisc0,
        GamepadMisc1,
        GamepadMisc2,
        GamepadMisc3,
        GamepadMisc4,
        StickLeftXNeg,
        StickLeftXPos,
        StickLeftYNeg,
        StickLeftYPos,
        StickRightXNeg,
        StickRightXPos,
        StickRightYNeg,
        StickRightYPos,
        TriggerLeft,
        TriggerRight,

        Count
    };

    extern const std::vector<EventId> KEYBOARD_MOUSE_EVENT_IDS;
    extern const std::vector<EventId> GAMEPAD_EVENT_IDS;

    extern const std::vector<SDL_Scancode>      VALID_KEYBOARD_SCAN_CODES;
    extern const std::vector<int>               VALID_KEYBOARD_MOD_CODES;
    extern const std::vector<int>               VALID_MOUSE_BUT_CODES;
    extern const std::vector<SDL_GamepadButton> VALID_GAMEPAD_BUT_CODES;
    extern const std::vector<SDL_GamepadAxis>   VALID_GAMEPAD_STICK_AXIS_CODES;
    extern const std::vector<SDL_GamepadAxis>   VALID_GAMEPAD_TRIG_AXIS_CODES;

    const std::string& GetEventName(EventId eventId);
}
