// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_SILENT_SAVEGAME_H_
#define FLATBUFFERS_GENERATED_TEST_SILENT_SAVEGAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Silent {
namespace Savegame {

struct Test;
struct TestBuilder;

struct Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_INT = 4,
    VT_TEST_BOOL = 6
  };
  int32_t test_int() const {
    return GetField<int32_t>(VT_TEST_INT, 0);
  }
  bool test_bool() const {
    return GetField<uint8_t>(VT_TEST_BOOL, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_INT, 4) &&
           VerifyField<uint8_t>(verifier, VT_TEST_BOOL, 1) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test_int(int32_t test_int) {
    fbb_.AddElement<int32_t>(Test::VT_TEST_INT, test_int, 0);
  }
  void add_test_bool(bool test_bool) {
    fbb_.AddElement<uint8_t>(Test::VT_TEST_BOOL, static_cast<uint8_t>(test_bool), 0);
  }
  explicit TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Test> CreateTest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_int = 0,
    bool test_bool = false) {
  TestBuilder builder_(_fbb);
  builder_.add_test_int(test_int);
  builder_.add_test_bool(test_bool);
  return builder_.Finish();
}

}  // namespace Savegame
}  // namespace Silent

#endif  // FLATBUFFERS_GENERATED_TEST_SILENT_SAVEGAME_H_
