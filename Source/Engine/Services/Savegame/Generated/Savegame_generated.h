// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAVEGAME_SILENT_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_SAVEGAME_SILENT_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Silent {
namespace FlatBuffers {

struct Stuff;
struct StuffBuilder;

struct Things;
struct ThingsBuilder;

struct Savegame;
struct SavegameBuilder;

struct Stuff FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StuffBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MY_INT = 4,
    VT_MY_BOOL = 6
  };
  int32_t my_int() const {
    return GetField<int32_t>(VT_MY_INT, 0);
  }
  bool my_bool() const {
    return GetField<uint8_t>(VT_MY_BOOL, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MY_INT, 4) &&
           VerifyField<uint8_t>(verifier, VT_MY_BOOL, 1) &&
           verifier.EndTable();
  }
};

struct StuffBuilder {
  typedef Stuff Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_my_int(int32_t my_int) {
    fbb_.AddElement<int32_t>(Stuff::VT_MY_INT, my_int, 0);
  }
  void add_my_bool(bool my_bool) {
    fbb_.AddElement<uint8_t>(Stuff::VT_MY_BOOL, static_cast<uint8_t>(my_bool), 0);
  }
  explicit StuffBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Stuff> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Stuff>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Stuff> CreateStuff(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t my_int = 0,
    bool my_bool = false) {
  StuffBuilder builder_(_fbb);
  builder_.add_my_int(my_int);
  builder_.add_my_bool(my_bool);
  return builder_.Finish();
}

struct Things FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ThingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MY_INT = 4,
    VT_MY_BOOLS = 6
  };
  int32_t my_int() const {
    return GetField<int32_t>(VT_MY_INT, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *my_bools() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MY_BOOLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MY_INT, 4) &&
           VerifyOffset(verifier, VT_MY_BOOLS) &&
           verifier.VerifyVector(my_bools()) &&
           verifier.EndTable();
  }
};

struct ThingsBuilder {
  typedef Things Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_my_int(int32_t my_int) {
    fbb_.AddElement<int32_t>(Things::VT_MY_INT, my_int, 0);
  }
  void add_my_bools(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> my_bools) {
    fbb_.AddOffset(Things::VT_MY_BOOLS, my_bools);
  }
  explicit ThingsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Things> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Things>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Things> CreateThings(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t my_int = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> my_bools = 0) {
  ThingsBuilder builder_(_fbb);
  builder_.add_my_bools(my_bools);
  builder_.add_my_int(my_int);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Things> CreateThingsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t my_int = 0,
    const std::vector<uint8_t> *my_bools = nullptr) {
  auto my_bools__ = my_bools ? _fbb.CreateVector<uint8_t>(*my_bools) : 0;
  return Silent::FlatBuffers::CreateThings(
      _fbb,
      my_int,
      my_bools__);
}

struct Savegame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SavegameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STUFF = 4,
    VT_THINGS = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>> *stuff() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>> *>(VT_STUFF);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Things>> *things() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Things>> *>(VT_THINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STUFF) &&
           verifier.VerifyVector(stuff()) &&
           verifier.VerifyVectorOfTables(stuff()) &&
           VerifyOffset(verifier, VT_THINGS) &&
           verifier.VerifyVector(things()) &&
           verifier.VerifyVectorOfTables(things()) &&
           verifier.EndTable();
  }
};

struct SavegameBuilder {
  typedef Savegame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_stuff(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>>> stuff) {
    fbb_.AddOffset(Savegame::VT_STUFF, stuff);
  }
  void add_things(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Things>>> things) {
    fbb_.AddOffset(Savegame::VT_THINGS, things);
  }
  explicit SavegameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Savegame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Savegame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Savegame> CreateSavegame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>>> stuff = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Silent::FlatBuffers::Things>>> things = 0) {
  SavegameBuilder builder_(_fbb);
  builder_.add_things(things);
  builder_.add_stuff(stuff);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Savegame> CreateSavegameDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>> *stuff = nullptr,
    const std::vector<::flatbuffers::Offset<Silent::FlatBuffers::Things>> *things = nullptr) {
  auto stuff__ = stuff ? _fbb.CreateVector<::flatbuffers::Offset<Silent::FlatBuffers::Stuff>>(*stuff) : 0;
  auto things__ = things ? _fbb.CreateVector<::flatbuffers::Offset<Silent::FlatBuffers::Things>>(*things) : 0;
  return Silent::FlatBuffers::CreateSavegame(
      _fbb,
      stuff__,
      things__);
}

inline const Silent::FlatBuffers::Savegame *GetSavegame(const void *buf) {
  return ::flatbuffers::GetRoot<Silent::FlatBuffers::Savegame>(buf);
}

inline const Silent::FlatBuffers::Savegame *GetSizePrefixedSavegame(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Silent::FlatBuffers::Savegame>(buf);
}

inline bool VerifySavegameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Silent::FlatBuffers::Savegame>(nullptr);
}

inline bool VerifySizePrefixedSavegameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Silent::FlatBuffers::Savegame>(nullptr);
}

inline void FinishSavegameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Silent::FlatBuffers::Savegame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSavegameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Silent::FlatBuffers::Savegame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatBuffers
}  // namespace Silent

#endif  // FLATBUFFERS_GENERATED_SAVEGAME_SILENT_FLATBUFFERS_H_
